/*
 * generated by Xtext
 */
package at.bestsolution.persistence.emap.generator

import at.bestsolution.persistence.emap.eMap.EMappingEntityDef
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import at.bestsolution.persistence.emap.eMap.EType
import at.bestsolution.persistence.emap.eMap.EMapping
import org.eclipse.emf.ecore.EClass
import java.util.ArrayList
import at.bestsolution.persistence.emap.eMap.EAttribute
import at.bestsolution.persistence.emap.eMap.EMappingEntity

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class EMapGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val root = resource.contents.head as EMapping
		if( root.root instanceof EMappingEntityDef ) {
			val edef = root.root as EMappingEntityDef
			if( edef.entity.abstract ) {
				return;
			}
			fsa.generateFile(edef.package.name.replace('.','/')+"/"+edef.entity.name + "Mapper.java", generateJavaMapper(edef, JavaHelper::getEClass(edef.entity.etype)))	
			fsa.generateFile("mappers/"+edef.entity.name+"Mapper.xml", generateMappingXML(edef, JavaHelper::getEClass(edef.entity.etype)))
		} else {
			
		}
	}
	
	def generateJavaMapper(EMappingEntityDef entityDef, EClass eClass) '''
	package «entityDef.package.name»;
	
	import at.bestsolution.persistence.mybatis.mapper.BaseMapper;
	
	public interface «entityDef.entity.name»Mapper extends BaseMapper<«eClass.instanceClassName»> {
		
	}
	'''
	
	def generateMappingXML(EMappingEntityDef entityDef, EClass eClass) '''
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="«eClass.instanceClassName»Mapper">
	<select id="selectById" parameterType="long" resultMap="«eClass.name»Map">
		SELECT * FROM «entityDef.tableName» WHERE 
	</select>
	<insert id="insertObject">
	INSERT INTO «entityDef.tableName»
	(
		«entityDef.allAttributes.map[columnName].join(",\n")»
	)
	VALUES
	(
		«entityDef.allAttributes.map[if(pk) "__ GEN __" else property].join(",\n")»
	)
	</insert>
</mapper>
	'''
	
	def static tableName(EMappingEntityDef entityDef) {
		if( entityDef.entity.tableName == null ) {
			return JavaHelper::getEClass(entityDef.entity.etype).name.toUpperCase
		}
		return entityDef.entity.tableName
	}
	
	def static allAttributes(EMappingEntityDef entityDef) {
		val l = new ArrayList<EAttribute>
		entityDef.entity.allAttributes(l)
		l.sort([ a,b | return if (a.pk) -1 else 0  ]);
	}
	
	def static void allAttributes(EMappingEntity entity, ArrayList<EAttribute> l) {
		l.addAll(entity.attributes)
		if( entity.extensionType == "derived" ) {
			entity.parent.allAttributes(l)
		}
	}
}
