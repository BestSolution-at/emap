/*******************************************************************************
 * Copyright (c) 2014 BestSolution.at and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Tom Schindl <tom.schindl@bestsolution.at> - initial API and implementation
 *******************************************************************************/
grammar at.bestsolution.persistence.emap.EMap with org.eclipse.xtext.common.Terminals

generate eMap "http://www.bestsolution.at/persistence/emap/EMap"

EMapping:
	root=(EMappingBundle|EMappingEntityDef);

EMappingBundle:
	imports+=Import*
	'bundle' name=ID '{'
		entities += [EMappingEntity|ID] (',' entities += [EMappingEntity|ID])*
	'}' ('databases' databases+=STRING (',' databases+=STRING)*)?
;

EMappingEntityDef:
	package=PackageDeclaration
	imports+=Import*
	entity=EMappingEntity
;

Import:
	'import' importedNamespace=(QualifiedNameWithWildcard|QualifiedName);

PackageDeclaration:
	'package' name=QualifiedName ';'
;

FQN:
	 ID (=>'.' ID)*
;

EMappingEntity:
	abstract?='abstract'? 'entity' name=ID (extensionType=('extends'|'derived') parent=[EMappingEntity|QualifiedName])? '{'
		 etype=EType
		 ('attributes'
		 '{'
		 	attributes += EAttribute (',' attributes += EAttribute)*
		 '}')?
		 ('queries'
		 '{'
		 	( namedQueries += ENamedQuery | namedCustomQueries += ENamedCustomQuery ) (',' ( namedQueries += ENamedQuery | namedCustomQueries += ENamedCustomQuery ))*
		 '}')?
	'}' ('as' tableName=ID)? ('descriminatedby' descriminationColumn=ID)?
;

EAttribute:
	( pk?='primarykey'? | forcedFk?='forced-fk' ) name=ID '=>' ( columnName=ID ('generatedby' '{' valueGenerators += EValueGenerator (',' valueGenerators+=EValueGenerator)* '}')? | (resolved?='resolve' query=[ENamedQuery|QualifiedName] '('parameters+=ID')' ( opposite=[EAttribute|QualifiedName] 'on' relationTable=ID ( '.' relationColumn=ID )? )?) )
;

EValueGenerator:
	dbType=STRING (autokey?='autokey' | 'query' query = STRING | 'seqnext' sequence = STRING )
;

ENamedQuery:
	returnType=ReturnType? name=ID ('(' (parameters+=EParameter (',' parameters+=EParameter)*)? ')')? '{'
		queries += EQuery (',' queries += EQuery)*
	'}'
;

EPrimtiveType:
	'int'|'long'|'double'|'float'|'boolean'|FQN
;

EMapType:
	'map'
;

ENamedCustomQuery:
	(returnType=EReturnType | list?='[' returnType=EReturnType ']' ) name=ID ('(' (parameters+=EParameter (',' parameters+=EParameter)*)? ')')? '{'
		queries += ECustomQuery
	'}'
;

EReturnType:
	EPredefinedType | ETypeDef | EModelTypeDef
;

EPredefinedType:
	ref = (EMapType | EPrimtiveType)
;

ETypeDef:
	'typedef' name=FQN '(' types+=EValueTypeAttribute (',' types+=EValueTypeAttribute)* ')'
;

EModelTypeDef:
	eclassDef = EType '(' attributes+=EModelTypeAttribute ( ',' attributes+=EModelTypeAttribute)* ')'
;

EModelTypeAttribute:
	name=ID ('resolve' query=[ENamedCustomQuery|QualifiedName] ('('(parameters+=ID (',' parameters+=ID)*)? ')')?)?
;

EValueTypeAttribute:
	type=EPrimtiveType name=ID
;

enum ReturnType:
	list|single
;

EParameter:
	id?='primarykey'? type=EPrimtiveType name=ID
;

EQuery:
	dbType=('default'|STRING) mapping = EObjectSection (('FROM' from=STRING ('WHERE' where=STRING)? ('GROUP BY' groupBy=STRING)? ('ORDER BY' orderby=STRING)? ) | all=STRING)
;

ECustomQuery:
	dbType=('default'|STRING) columns=STRING (('FROM' from=STRING ('WHERE' where=STRING)? ('GROUP BY' groupBy=STRING)? ('ORDER BY' orderby=STRING)? ) | all=STRING)
;

EObjectSection:
//	noreferences?='noreferences'?
	entity=[EMappingEntity|ID] ('(' descriminatedTypes+=[EMappingEntity|ID] (',' descriminatedTypes+=[EMappingEntity|ID])+ ')')? (prefix=ID ('{'
		attributes+=EMappingAttribute (',' attributes += EMappingAttribute)*
	'}')?)? // ('exclude' '{' excludedProperties+=QualifiedName (',' excludedProperties+=QualifiedName)* '}' )?
;

EMappingAttribute:
	pk?='primarykey'? property=QualifiedName '=>' ( columnName=ID | (resolved?='resolve' query=[ENamedQuery|QualifiedName] '('parameters+=ID')') | (mapped?='map' map=EObjectSection) )
;


EType:
	'etype' url=STRING '#' name=ID
;

QualifiedName:
  ID (=>'.' ID)*;

QualifiedNameWithWildcard :
	QualifiedName  '.' '*';