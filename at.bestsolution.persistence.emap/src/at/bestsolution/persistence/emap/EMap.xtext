grammar at.bestsolution.persistence.emap.EMap with org.eclipse.xtext.common.Terminals

generate eMap "http://www.bestsolution.at/persistence/emap/EMap"

EMapping:
	root=(EMappingBundle|EMappingEntityDef);

EMappingBundle:
	imports+=Import*
	'bundle' name=ID '{'
		entities += [EMappingEntity|ID] (',' entities += [EMappingEntity|ID])*
	'}' ('databases' databases+=STRING (',' databases+=STRING)*)?
;

EMappingEntityDef:
	package=PackageDeclaration
	imports+=Import*
	entity=EMappingEntity
;

Import:
	'import' importedNamespace=(QualifiedNameWithWildcard|QualifiedName);

PackageDeclaration:
	'package' name=QualifiedName ';'
;

EMappingEntity:
	abstract?='abstract'? 'entity' name=ID (extensionType=('extends'|'derived') parent=[EMappingEntity|QualifiedName])? '{'
		 etype=EType
		 ('attributes'
		 '{'
		 	attributes += EAttribute (',' attributes += EAttribute)*
		 '}')?
		 ('queries'
		 '{'
		 	namedQueries += ENamedQuery (',' namedQueries+=ENamedQuery)*
		 '}')?
	'}' ('as' tableName=ID)? ('descriminatedby' descriminationColumn=ID)?
;

EAttribute:
	pk?='primarykey'? name=ID '=>' ( columnName=ID ('generatedby' '{' valueGenerators += EValueGenerator (',' valueGenerators+=EValueGenerator)* '}')? | (resolved?='resolve' query=[ENamedQuery|QualifiedName] '('parameters+=ID')' ( opposite=[EAttribute|QualifiedName] 'on' relationTable=ID)?) )
;

EValueGenerator:
	dbType=STRING (autokey?='autokey' | 'query' query = STRING | 'seqnext' sequence = STRING )
;

ENamedQuery:
	returnType=ReturnType? name=ID ('(' (parameters+=EParameter (',' parameters+=EParameter)*)? ')')? '{'
		queries += EQuery (',' queries += EQuery)*
	'}'
;

enum ReturnType:
	list|single
;

EParameter:
	type=ID name=ID
;

EQuery:
	dbType=('default'|STRING) mapping = EObjectSection (('FROM' from=STRING ('WHERE' where=STRING)? ('GROUP BY' groupBy=STRING)? ('ORDER BY' orderby=STRING)? ) | all=STRING)
;

EObjectSection:
//	noreferences?='noreferences'?
	entity=[EMappingEntity|ID] ('(' descriminatedTypes+=[EMappingEntity|ID] (',' descriminatedTypes+=[EMappingEntity|ID])+ ')')? (prefix=ID ('{'
		attributes+=EMappingAttribute (',' attributes += EMappingAttribute)*
	'}')?)? // ('exclude' '{' excludedProperties+=QualifiedName (',' excludedProperties+=QualifiedName)* '}' )?
;

EMappingAttribute:
	pk?='primarykey'? property=QualifiedName '=>' ( columnName=ID | (resolved?='resolve' query=[ENamedQuery|QualifiedName] '('parameters+=ID')') | (mapped?='map' map=EObjectSection) )
;


EType:
	'etype' url=STRING '#' name=ID
;

QualifiedName:
  ID (=>'.' ID)*;

QualifiedNameWithWildcard :
	QualifiedName  '.' '*';