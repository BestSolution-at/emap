package test.model.emap.mixedkeys;

import test.model.mixedkeys.Address;
import java.util.Map;

public interface MAddressMapper extends at.bestsolution.persistence.ObjectMapper<test.model.mixedkeys.Address> {
	
	// generated by JavaInterfaceGenerator
	public static interface Key extends at.bestsolution.persistence.Key<Address> {
		public java.math.BigInteger id();
	}
	
	// by KeyGenerator
	final static at.bestsolution.persistence.java.KeyLayout<MAddressMapper.Key> PKLayout = new at.bestsolution.persistence.java.KeyLayout<MAddressMapper.Key>(
		new at.bestsolution.persistence.java.KeyLayout.KeyLayoutEntry("id", "ID", java.math.BigInteger.class)) {
		@Override
		public MAddressMapper.Key create(Map<String, Object> values) {
			return new KeyImpl(values);
		}
	};
	
	// by KeyGenerator
	final static at.bestsolution.persistence.java.KeyLayout<test.model.emap.mixedkeys.MPersonMapper.Key> FKPersonLayout = new at.bestsolution.persistence.java.KeyLayout<test.model.emap.mixedkeys.MPersonMapper.Key>(
		new at.bestsolution.persistence.java.KeyLayout.KeyLayoutEntry("id", "FK_PERSON", java.lang.String.class)
	) {
		@Override
		public test.model.emap.mixedkeys.MPersonMapper.Key create(Map<String, Object> values) {
			// delegate to PKLayout of opposite
			return test.model.emap.mixedkeys.MPersonMapper.PKLayout.create(values);
		}
	};
	
	// by KeyGenerator
	final static class KeyImpl extends at.bestsolution.persistence.java.AMapBasedKey<Address> implements MAddressMapper.Key {
		KeyImpl(Map<String, Object> values) {
			super(Address.class, values);
		}
		
		@Override
		public at.bestsolution.persistence.java.KeyLayout<MAddressMapper.Key> getKeyLayout() {
			// TODO think about me some more!
			return PKLayout;
		}
		
		@Override
		public java.math.BigInteger id() {
			return getValue("id");
		}
		
		
		@Override
		public String toString() {
			return "Key(MAddress, " + super.toString() + ")";
		}
	}
	
	
	/**
	 * Find elements managed Domain-Elements with a query like this:
	 * <pre>
	 * SELECT
	 *   *
	 * FROM
	 *   MADDRESS
	 *   WHERE
	 *     ID = #{id}
	 * </pre>
	 * 
	 * @param id
	 * 
	 */
	public test.model.mixedkeys.Address selectById(java.math.BigInteger id);
	/**
	 * Find elements managed Domain-Elements with a query like this:
	 * <pre>
	 * SELECT
	 *   *
	 * FROM
	 *   MADDRESS
	 *   WHERE
	 *     FK_PERSON = #{personId}
	 * </pre>
	 * 
	 * @param personId
	 * 
	 */
	public java.util.List<test.model.mixedkeys.Address> selectAllForPerson(String personId);


		/**
		 * Build dynamic query filters
		 */
		public static final class Expression {
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address, Address> self_obj() {
				return new at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address, Address>("id") {
					@Override
					protected <K extends at.bestsolution.persistence.Key<Address>> K getKey(Address o) {
						// TODO howto create an instance of the key here within the interface -.-
						return null;
					}
				};
			}

			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address, Address> MAddress_self_obj() {
					return self_obj();
			}

			/**
			 * Filter on id
			 */
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Address,java.math.BigInteger> id() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Address,java.math.BigInteger>("id");}
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Address,java.math.BigInteger> MAddress_id() { return id();}
			/**
			 * Filter on street
			 */
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Address> street() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Address>("street");}
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Address> MAddress_street() { return street();}
			/**
			 * Join with MPerson
			 */
			public static final test.model.emap.mixedkeys.MPersonMapper.Join<Address> person() { return new test.model.emap.mixedkeys.MPersonMapper.Join<Address>("person");};
			public static final test.model.emap.mixedkeys.MPersonMapper.Join<Address> MAddress_person() { return person(); }
			/**
			 * Join directly on the fk avoiding unneeded joins
			 */
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Address> person_fk() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Address>("person"); };
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Address> MAddress_person_fk() { return person_fk(); };

			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address,test.model.mixedkeys.Person> person_obj() {
				return new at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address,test.model.mixedkeys.Person>("person") {
					@Override
					protected <K extends at.bestsolution.persistence.Key<test.model.mixedkeys.Person>> K getKey(test.model.mixedkeys.Person o) {
						// TODO howto create an instance of the key here within the interface -.-
						return null;
					}
				};
			}
			
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address,test.model.mixedkeys.Person> MAddress_person_obj() {
				return person_obj();
			}
			
			
			/**
			 * Join with MTag
			 */
			public static final test.model.emap.mixedkeys.MTagMapper.Join<Address> tags() { return new test.model.emap.mixedkeys.MTagMapper.Join<Address>("tags");};
			public static final test.model.emap.mixedkeys.MTagMapper.Join<Address> MAddress_tags() { return tags(); }
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address,test.model.mixedkeys.Tag> tags_obj() {
				return new at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address,test.model.mixedkeys.Tag>("tags."+tags().id().getProperty()) {
					//protected long getSid(test.model.mixedkeys.Tag value) {
					//	return value.getId();
					//}
					@Override
					protected <K extends at.bestsolution.persistence.Key<test.model.mixedkeys.Tag>> K getKey(test.model.mixedkeys.Tag o) {
						// TODO howto create an instance of the key here within the interface -.-
						return null;
					}
				};
			}

			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address,test.model.mixedkeys.Tag> MAddress_tags_obj() {
				return tags_obj();
			}
			
			
		}

		/**
		 * Do not create instances of this class but use {@link MAddressMapper#metaData()}
		 */
		public static class MetaData {
			public at.bestsolution.persistence.AttributeMetaData<Address,java.math.BigInteger,at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Address,java.math.BigInteger>> id() {
				return new at.bestsolution.persistence.AttributeMetaData<>(Address.class,java.math.BigInteger.class,Expression.id(),Order.id());
			}
			public at.bestsolution.persistence.AttributeMetaData<Address,java.lang.String,at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Address>> street() {
				return new at.bestsolution.persistence.AttributeMetaData<>(Address.class,java.lang.String.class,Expression.street(),Order.street());
			}
			public at.bestsolution.persistence.ReferenceMetaData<Address,test.model.mixedkeys.Person,at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address,test.model.mixedkeys.Person>> person() {
				return new at.bestsolution.persistence.ReferenceMetaData<>(Address.class,test.model.mixedkeys.Person.class,Expression.person_obj());
			}
			public at.bestsolution.persistence.ReferenceMetaData<Address,test.model.mixedkeys.Tag,at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Address,test.model.mixedkeys.Tag>> tags() {
				return new at.bestsolution.persistence.ReferenceMetaData<>(Address.class,test.model.mixedkeys.Tag.class,Expression.tags_obj());
			}
		}

		public MetaData metaData();

		/**
		 * Build dynamic query order by
		 */
		public static final class Order {
			/**
			 * Order by for id
			 */
			public static final at.bestsolution.persistence.order.OrderColumnFactory<Address> id() { return new at.bestsolution.persistence.order.OrderColumnFactory<Address>("id");};
			/**
			 * Order by for street
			 */
			public static final at.bestsolution.persistence.order.OrderColumnFactory<Address> street() { return new at.bestsolution.persistence.order.OrderColumnFactory<Address>("street");};
			/**
			 * Order by for person
			 */
		}

		/**
		 * Build join expressions
		 */
		public static final class Join<O> {
			private final String path;
			public Join(String path) {
				this.path = path;
			}

			/**
			 * Filter on id
			 */
			public final at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<O,java.math.BigInteger> id() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<O,java.math.BigInteger>(path+".id");};
			/**
			 * Filter on street
			 */
			public final at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<O> street() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<O>(path+".street");};
			/**
			 * Join with MPerson
			 */
			public final test.model.emap.mixedkeys.MPersonMapper.Join<O> person() {return new test.model.emap.mixedkeys.MPersonMapper.Join<O>(path+".person");};
			/**
			 * Join with MTag
			 */
			public final test.model.emap.mixedkeys.MTagMapper.Join<O> tags() {return new test.model.emap.mixedkeys.MTagMapper.Join<O>(path+".tags");};
		}
		/**
		 * Build a delete query
		 */
		public at.bestsolution.persistence.MappedUpdateQuery<Address> deleteAllMappedQuery();

}
