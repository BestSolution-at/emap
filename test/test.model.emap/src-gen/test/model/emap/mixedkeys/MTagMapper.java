package test.model.emap.mixedkeys;

import test.model.mixedkeys.Tag;
import java.util.Map;

public interface MTagMapper extends at.bestsolution.persistence.ObjectMapper<test.model.mixedkeys.Tag> {
	
	// generated by JavaInterfaceGenerator
	public static interface Key extends at.bestsolution.persistence.Key<Tag> {
		public java.math.BigInteger id();
	}
	
	// by KeyGenerator
	final static at.bestsolution.persistence.java.KeyLayout<MTagMapper.Key> PKLayout = new at.bestsolution.persistence.java.KeyLayout<MTagMapper.Key>(
		new at.bestsolution.persistence.java.KeyLayout.KeyLayoutEntry("id", "ID", java.math.BigInteger.class)) {
		@Override
		public MTagMapper.Key create(Map<String, Object> values) {
			return new KeyImpl(values);
		}
	};
	
	// by KeyGenerator
	final static at.bestsolution.persistence.java.KeyLayout<test.model.emap.mixedkeys.MAddressMapper.Key> FKAddressLayout = new at.bestsolution.persistence.java.KeyLayout<test.model.emap.mixedkeys.MAddressMapper.Key>(
		new at.bestsolution.persistence.java.KeyLayout.KeyLayoutEntry("id", "FK_ADDRESS", java.math.BigInteger.class)
	) {
		@Override
		public test.model.emap.mixedkeys.MAddressMapper.Key create(Map<String, Object> values) {
			// delegate to PKLayout of opposite
			return test.model.emap.mixedkeys.MAddressMapper.PKLayout.create(values);
		}
	};
	
	// by KeyGenerator
	final static class KeyImpl extends at.bestsolution.persistence.java.AMapBasedKey<Tag> implements MTagMapper.Key {
		KeyImpl(Map<String, Object> values) {
			super(Tag.class, values);
		}
		
		@Override
		public at.bestsolution.persistence.java.KeyLayout<MTagMapper.Key> getKeyLayout() {
			// TODO think about me some more!
			return PKLayout;
		}
		
		@Override
		public java.math.BigInteger id() {
			return getValue("id");
		}
		
		
		@Override
		public String toString() {
			return "Key(MTag, " + super.toString() + ")";
		}
	}
	
	
	/**
	 * Find elements managed Domain-Elements with a query like this:
	 * <pre>
	 * SELECT
	 *   *
	 * FROM
	 *   MTAG
	 *   WHERE
	 *     ID = #{id}
	 * </pre>
	 * 
	 * @param id
	 * 
	 */
	public test.model.mixedkeys.Tag selectById(java.math.BigInteger id);
	/**
	 * Find elements managed Domain-Elements with a query like this:
	 * <pre>
	 * SELECT
	 *   *
	 * FROM
	 *   MTAG
	 *   WHERE
	 *     FK_ADDRESS = #{addressId}
	 * </pre>
	 * 
	 * @param addressId
	 * 
	 */
	public java.util.List<test.model.mixedkeys.Tag> selectAllForAddress(java.math.BigInteger addressId);


		/**
		 * Build dynamic query filters
		 */
		public static final class Expression {
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Tag, Tag> self_obj() {
				return new at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Tag, Tag>("id") {
					@Override
					protected <K extends at.bestsolution.persistence.Key<Tag>> K getKey(Tag o) {
						// TODO howto create an instance of the key here within the interface -.-
						return null;
					}
				};
			}

			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Tag, Tag> MTag_self_obj() {
					return self_obj();
			}

			/**
			 * Filter on id
			 */
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Tag,java.math.BigInteger> id() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Tag,java.math.BigInteger>("id");}
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Tag,java.math.BigInteger> MTag_id() { return id();}
			/**
			 * Filter on endlessInt
			 */
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Tag,java.math.BigInteger> endlessInt() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Tag,java.math.BigInteger>("endlessInt");}
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Tag,java.math.BigInteger> MTag_endlessInt() { return endlessInt();}
			/**
			 * Filter on value
			 */
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Tag> value() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Tag>("value");}
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Tag> MTag_value() { return value();}
			/**
			 * Join with MAddress
			 */
			public static final test.model.emap.mixedkeys.MAddressMapper.Join<Tag> address() { return new test.model.emap.mixedkeys.MAddressMapper.Join<Tag>("address");};
			public static final test.model.emap.mixedkeys.MAddressMapper.Join<Tag> MTag_address() { return address(); }
			/**
			 * Join directly on the fk avoiding unneeded joins
			 */
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Tag> address_fk() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Tag>("address"); };
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Tag> MTag_address_fk() { return address_fk(); };

			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Tag,test.model.mixedkeys.Address> address_obj() {
				return new at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Tag,test.model.mixedkeys.Address>("address") {
					@Override
					protected <K extends at.bestsolution.persistence.Key<test.model.mixedkeys.Address>> K getKey(test.model.mixedkeys.Address o) {
						// TODO howto create an instance of the key here within the interface -.-
						return null;
					}
				};
			}
			
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Tag,test.model.mixedkeys.Address> MTag_address_obj() {
				return address_obj();
			}
			
			
		}

		/**
		 * Do not create instances of this class but use {@link MTagMapper#metaData()}
		 */
		public static class MetaData {
			public at.bestsolution.persistence.AttributeMetaData<Tag,java.math.BigInteger,at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Tag,java.math.BigInteger>> id() {
				return new at.bestsolution.persistence.AttributeMetaData<>(Tag.class,java.math.BigInteger.class,Expression.id(),Order.id());
			}
			public at.bestsolution.persistence.AttributeMetaData<Tag,java.math.BigInteger,at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<Tag,java.math.BigInteger>> endlessInt() {
				return new at.bestsolution.persistence.AttributeMetaData<>(Tag.class,java.math.BigInteger.class,Expression.endlessInt(),Order.endlessInt());
			}
			public at.bestsolution.persistence.AttributeMetaData<Tag,java.lang.String,at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Tag>> value() {
				return new at.bestsolution.persistence.AttributeMetaData<>(Tag.class,java.lang.String.class,Expression.value(),Order.value());
			}
			public at.bestsolution.persistence.ReferenceMetaData<Tag,test.model.mixedkeys.Address,at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Tag,test.model.mixedkeys.Address>> address() {
				return new at.bestsolution.persistence.ReferenceMetaData<>(Tag.class,test.model.mixedkeys.Address.class,Expression.address_obj());
			}
		}

		public MetaData metaData();

		/**
		 * Build dynamic query order by
		 */
		public static final class Order {
			/**
			 * Order by for id
			 */
			public static final at.bestsolution.persistence.order.OrderColumnFactory<Tag> id() { return new at.bestsolution.persistence.order.OrderColumnFactory<Tag>("id");};
			/**
			 * Order by for endlessInt
			 */
			public static final at.bestsolution.persistence.order.OrderColumnFactory<Tag> endlessInt() { return new at.bestsolution.persistence.order.OrderColumnFactory<Tag>("endlessInt");};
			/**
			 * Order by for value
			 */
			public static final at.bestsolution.persistence.order.OrderColumnFactory<Tag> value() { return new at.bestsolution.persistence.order.OrderColumnFactory<Tag>("value");};
			/**
			 * Order by for address
			 */
		}

		/**
		 * Build join expressions
		 */
		public static final class Join<O> {
			private final String path;
			public Join(String path) {
				this.path = path;
			}

			/**
			 * Filter on id
			 */
			public final at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<O,java.math.BigInteger> id() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<O,java.math.BigInteger>(path+".id");};
			/**
			 * Filter on endlessInt
			 */
			public final at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<O,java.math.BigInteger> endlessInt() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.GenericExpressionFactory<O,java.math.BigInteger>(path+".endlessInt");};
			/**
			 * Filter on value
			 */
			public final at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<O> value() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<O>(path+".value");};
			/**
			 * Join with MAddress
			 */
			public final test.model.emap.mixedkeys.MAddressMapper.Join<O> address() {return new test.model.emap.mixedkeys.MAddressMapper.Join<O>(path+".address");};
		}
		/**
		 * Build a delete query
		 */
		public at.bestsolution.persistence.MappedUpdateQuery<Tag> deleteAllMappedQuery();

}
