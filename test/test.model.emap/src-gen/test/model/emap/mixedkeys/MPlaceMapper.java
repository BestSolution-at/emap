package test.model.emap.mixedkeys;

import test.model.mixedkeys.Place;
import java.util.Map;

public interface MPlaceMapper extends at.bestsolution.persistence.ObjectMapper<test.model.mixedkeys.Place> {
	
	// generated by JavaInterfaceGenerator
	public static interface Key extends at.bestsolution.persistence.Key<Place> {
		public long id();
	}
	
	// by KeyGenerator
	final static at.bestsolution.persistence.java.KeyLayout<MPlaceMapper.Key> PKLayout = new at.bestsolution.persistence.java.KeyLayout<MPlaceMapper.Key>(
		new at.bestsolution.persistence.java.KeyLayout.KeyLayoutEntry("id", "ID", long.class)) {
		@Override
		public MPlaceMapper.Key create(Map<String, Object> values) {
			return new KeyImpl(values);
		}
	};
	
	
	// by KeyGenerator
	final static class KeyImpl extends at.bestsolution.persistence.java.AMapBasedKey<Place> implements MPlaceMapper.Key {
		KeyImpl(Map<String, Object> values) {
			super(Place.class, values);
		}
		
		@Override
		public at.bestsolution.persistence.java.KeyLayout<MPlaceMapper.Key> getKeyLayout() {
			// TODO think about me some more!
			return PKLayout;
		}
		
		@Override
		public long id() {
			return getValue("id");
		}
		
		
		@Override
		public String toString() {
			return "Key(MPlace, " + super.toString() + ")";
		}
	}
	
	
	/**
	 * Find elements managed Domain-Elements with a query like this:
	 * <pre>
	 * SELECT
	 *   *
	 * FROM
	 *   MPLACE
	 *   WHERE
	 *     ID = #{id}
	 * </pre>
	 * 
	 * @param id
	 * 
	 */
	public test.model.mixedkeys.Place selectById(long id);
	/**
	 * Find elements managed Domain-Elements with a query like this:
	 * <pre>
	 * SELECT
	 *   *
	 * FROM
	 *   MPLACE, MLIKES_PERSON_PLACE
	 *   WHERE
	 *     MPLACE.ID = MLIKES_PERSON_PLACE.FK_PLACE AND MLIKES_PERSON_PLACE.FK_PERSON = #{personId}
	 * </pre>
	 * 
	 * @param personId
	 * 
	 */
	public java.util.List<test.model.mixedkeys.Place> selectAllForPerson(String personId);


		/**
		 * Build dynamic query filters
		 */
		public static final class Expression {
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Place, Place> self_obj() {
				return new at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Place, Place>("id") {
					@Override
					protected <K extends at.bestsolution.persistence.Key<Place>> K getKey(Place o) {
						// TODO howto create an instance of the key here within the interface -.-
						return null;
					}
				};
			}

			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Place, Place> MPlace_self_obj() {
					return self_obj();
			}

			/**
			 * Filter on id
			 */
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Place> id() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Place>("id");}
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Place> MPlace_id() { return id();}
			/**
			 * Filter on name
			 */
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Place> name() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Place>("name");}
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Place> MPlace_name() { return name();}
			/**
			 * Join with MPerson
			 */
			public static final test.model.emap.mixedkeys.MPersonMapper.Join<Place> likedBy() { return new test.model.emap.mixedkeys.MPersonMapper.Join<Place>("likedBy");};
			public static final test.model.emap.mixedkeys.MPersonMapper.Join<Place> MPlace_likedBy() { return likedBy(); }
			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Place,test.model.mixedkeys.Person> likedBy_obj() {
				return new at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Place,test.model.mixedkeys.Person>("likedBy."+likedBy().id().getProperty()) {
					//protected long getSid(test.model.mixedkeys.Person value) {
					//	return value.getId();
					//}
					@Override
					protected <K extends at.bestsolution.persistence.Key<test.model.mixedkeys.Person>> K getKey(test.model.mixedkeys.Person o) {
						// TODO howto create an instance of the key here within the interface -.-
						return null;
					}
				};
			}

			public static final at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Place,test.model.mixedkeys.Person> MPlace_likedBy_obj() {
				return likedBy_obj();
			}
			
			
		}

		/**
		 * Do not create instances of this class but use {@link MPlaceMapper#metaData()}
		 */
		public static class MetaData {
			public at.bestsolution.persistence.AttributeMetaData<Place,Long,at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<Place>> id() {
				return new at.bestsolution.persistence.AttributeMetaData<>(Place.class,long.class,Expression.id(),Order.id());
			}
			public at.bestsolution.persistence.AttributeMetaData<Place,java.lang.String,at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<Place>> name() {
				return new at.bestsolution.persistence.AttributeMetaData<>(Place.class,java.lang.String.class,Expression.name(),Order.name());
			}
			public at.bestsolution.persistence.ReferenceMetaData<Place,test.model.mixedkeys.Person,at.bestsolution.persistence.expr.PropertyExpressionFactory.EntityExpressionFactory<Place,test.model.mixedkeys.Person>> likedBy() {
				return new at.bestsolution.persistence.ReferenceMetaData<>(Place.class,test.model.mixedkeys.Person.class,Expression.likedBy_obj());
			}
		}

		public MetaData metaData();

		/**
		 * Build dynamic query order by
		 */
		public static final class Order {
			/**
			 * Order by for id
			 */
			public static final at.bestsolution.persistence.order.OrderColumnFactory<Place> id() { return new at.bestsolution.persistence.order.OrderColumnFactory<Place>("id");};
			/**
			 * Order by for name
			 */
			public static final at.bestsolution.persistence.order.OrderColumnFactory<Place> name() { return new at.bestsolution.persistence.order.OrderColumnFactory<Place>("name");};
		}

		/**
		 * Build join expressions
		 */
		public static final class Join<O> {
			private final String path;
			public Join(String path) {
				this.path = path;
			}

			/**
			 * Filter on id
			 */
			public final at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<O> id() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.LongExpressionFactory<O>(path+".id");};
			/**
			 * Filter on name
			 */
			public final at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<O> name() { return new at.bestsolution.persistence.expr.PropertyExpressionFactory.StringExpressionFactory<O>(path+".name");};
			/**
			 * Join with MPerson
			 */
			public final test.model.emap.mixedkeys.MPersonMapper.Join<O> likedBy() {return new test.model.emap.mixedkeys.MPersonMapper.Join<O>(path+".likedBy");};
		}
		/**
		 * Build a delete query
		 */
		public at.bestsolution.persistence.MappedUpdateQuery<Place> deleteAllMappedQuery();

}
